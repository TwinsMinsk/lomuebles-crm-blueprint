
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { OrderFormValues } from "../orderFormSchema";
import { toast } from "sonner";

interface UseOrderFormSubmitProps {
  orderId?: number;
  isEdit: boolean;
  onError?: (error: Error) => void;
}

export const useOrderFormSubmit = ({ orderId, isEdit, onError }: UseOrderFormSubmitProps) => {
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const navigate = useNavigate();
  
  const onSubmit = async (data: OrderFormValues) => {
    setIsLoading(true);
    
    try {
      // Get current user information
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error("Пользователь не аутентифицирован");
      
      // Validate required fields
      if (!data.associatedContactId) {
        throw new Error("Выбор клиента обязателен");
      }

      // Prepare data for saving
      const orderData: any = {
        order_name: data.orderName,
        order_type: data.orderType,
        client_language: data.clientLanguage,
        associated_contact_id: data.associatedContactId,
        associated_company_id: data.associatedCompanyId || null,
        source_lead_id: data.sourceLeadId || null,
        assigned_user_id: data.assignedUserId || null,
        final_amount: data.finalAmount || null,
        payment_status: data.paymentStatus || null,
        delivery_address_full: data.deliveryAddressFull || null,
        notes_history: data.notesHistory || null,
        closing_date: data.closingDate || null,
        attached_files_order_docs: data.attachedFilesOrderDocs || []
      };
      
      // Log order data for debugging
      console.log("Submitting order data:", orderData);
      
      // Set status based on order type
      if (data.orderType === "Готовая мебель (Tilda)") {
        orderData.status_ready_made = data.statusReadyMade;
        orderData.status_custom_made = null;
      } else {
        orderData.status_custom_made = data.statusCustomMade;
        orderData.status_ready_made = null;
        orderData.associated_partner_manufacturer_id = data.associatedPartnerManufacturerId;
      }
      
      // For new orders, set creator and creation date
      if (!isEdit) {
        orderData.creator_user_id = user.id;
        // Order number will be generated by database trigger
      } else if (data.notesHistory) {
        // Add timestamp and user to notes history
        const timestamp = new Date().toLocaleString('ru-RU');
        const currentNotes = data.notesHistory;
        orderData.notes_history = `${currentNotes}\n\n${timestamp} - Обновлено пользователем ${user.email}`;
      }
      
      let result;
      
      if (isEdit && orderId) {
        // Update existing order
        result = await supabase
          .from("deals_orders")
          .update(orderData)
          .eq("deal_order_id", orderId)
          .select();
          
        if (result.error) throw new Error(`Ошибка обновления заказа: ${result.error.message}`);
        
        toast.success("Заказ успешно обновлен");
      } else {
        // Create new order
        result = await supabase
          .from("deals_orders")
          .insert(orderData)
          .select();
          
        if (result.error) throw new Error(`Ошибка создания заказа: ${result.error.message}`);
        
        toast.success("Заказ успешно создан");
      }
      
      // Navigate back to orders list
      navigate("/orders");
      
    } catch (error: any) {
      console.error("Error saving order:", error);
      
      toast.error(`Ошибка сохранения заказа: ${error.message}`);
      
      // Pass error to callback if provided
      if (onError) {
        onError(error);
      }
      
      // Re-throw the error to be handled by the form
      throw error;
      
    } finally {
      setIsLoading(false);
    }
  };
  
  return {
    isLoading,
    onSubmit,
  };
};
